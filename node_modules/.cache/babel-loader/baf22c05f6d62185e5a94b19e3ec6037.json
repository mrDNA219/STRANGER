{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT';\nexport const getPosts = async () => {\n  try {\n    const response = await fetch(`${baseURL}/posts`);\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.error(er);\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.error(er);\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.error(er);\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.error(er);\n  }\n};\nexport const createPost = async (token, _ref, postID) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n\n  try {\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.error('error creating new post');\n  }\n};\nexport const updatePost = async (token, _ref2) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref2;\n\n  try {\n    const response = await fetch(`${baseURL}/posts/${_id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const results = await response.json();\n    return results;\n  } catch (er) {\n    console.log('error updating the post');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","response","fetch","results","json","er","console","error","registerUser","username","password","method","headers","body","JSON","stringify","user","loginUser","getUserDetails","token","createPost","postID","title","description","price","location","willDeliver","post","updatePost","_id","log"],"sources":["/Users/francis/Desktop/Bootcamp/Stranger's Things/src/api/index.js"],"sourcesContent":["\nconst baseURL = 'https://strangers-things.herokuapp.com/api/2206-FTB-ET-WEB-PT'\n\nexport const getPosts = async () => {\n    try{\n        const response = await fetch(`${baseURL}/posts`);\n        const results =  await response.json();\n        return(results)\n    } catch(er){\n        console.error(er)\n    }\n}\n\nexport const registerUser = async (username, password) => {\n    try{\n        const response = await fetch(`${baseURL}/users/register`, {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user: {\n                username: username,\n                password: password\n              }\n            })\n          });\n        const results = await response.json();\n        return(results)\n    } catch(er){\n        console.error(er)\n    }\n}\nexport const loginUser = async (username, password) => {\n  try{\n    const response = await fetch(`${baseURL}/users/login`,{\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const results = await response.json();\n    return results;\n  } catch(er) {\n    console.error(er)\n  }\n}\nexport const getUserDetails = async (token) => {\n  try{\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      }\n    })\n    const results = await response.json()\n    return results\n  } catch(er) {\n    console.error(er)\n  }\n}\nexport const createPost = async (token, {title, description, price, location, willDeliver}, postID) => {\n  try{\n    const response = await fetch(`${baseURL}/posts/${postID}`,  {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      }, \n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    })\n    const results = await response.json()\n    return results\n  } catch(er) {\n    console.error('error creating new post')\n  }\n}\nexport const updatePost = async (token, {title, description, price, location, willDeliver}) => {\n  try{\n    const response = await fetch(`${baseURL}/posts/${_id}`,  {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${token}`\n      }, \n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    })\n    const results = await response.json()\n    return results\n  } catch(er) {\n    console.log('error updating the post')\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}